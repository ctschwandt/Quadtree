#ifndef QTNODE_H
#define QTNODE_H

/**
   The time is 7:03pm, 11/30/2024. Fauna has just announced her graduation...
 **/
/*                                                                                                
          ####%@%#++*+#%@@@%*+++++++++#@@@@@%#+++++++++++++++++++++++++++++*%%*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*#%@@@@@@@@@@@@@@@          
          ####@@#++++*+**@@@%+++++++*%@@@@%#++++++++++++++++++++++++++++++*%%*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#%%@@%%#*#@@@%##          
          ###%@**++++++**@@@%+++++*%@@@@@#*+++++++++++++++++++++++++++++*#%#+++++++++++++++++++++++++++++++++++++++**+++++++++++++++++++++++++++++++++++++*#%#####@@@####          
          ##*#%*+++++++**@@%*++++#@@@@@@*+++++++++++++++++++++++++***++*#%#++++++++++++++++++++++++++++++++++++++++**++++++++++++++++++++++++++++++++++++++*#%###%@@#####          
          ##****+++++*+#@@@#+++%@@@@@@%#+++++++++++++++++++++**********#%#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*%%#%@@@####          
          ##*+++++++**%@@@#++*@@@@@%%%#+++++++++++++++++++************#%#*++++++++++++++++++++++++++++++++++++++++++*#++++++++++++++++++++++++++++++++++++++++*%%%@@@@###          
          #**+++++**#@@@%+++#@@@@@%*%%#++++++++++*##**##########*****#%%+++++++++++++++++++++++++++++++++++++++++++++*+++++++++++++++++++++++++++++++++++++++++#%##@@@@%*          
          #**+++*#%@@@%*++*%@@@@%#**%%#++++++++++*%%%%#########****##%#++++++++++*++++++++++++++++++++++++++++++++++++**++++++++++++++++++++++++++++++++++++++++*%%#%@@@@          
          #***#%@@@%#++++%@@@@@%#***#%#+++++++++*#%###########****###%*++++++++**+++++++++++++++++++++++++++++++++++++#*+++++++++++++++++++++++++++++++++++++++++*#%##%@@          
          #%@@@@%*+++++*@@@@@@##****#%#++++++++*#%##########****###%%#++++++++***+++++++++++++++++++++++++++++++++++++**++++++++++++++++++++++++++++++++++++++++++*%%#*#@          
          @@%#*++++++*%@@@@@%%%%%%%%%%#*+++++++*###########****###%%#*+++++++*#*+++++++++++++++++++++++++++++++++++++++##++++++++++++++++++++++++++++++++++++++++++*%####          
          ++++++++++*@@@@%%%%#########%#+++++**###########***####%%%*+++++++****+++++++++++++++++++++++++++++++++++++++##+++++++++++++++++++++++++++++++++++++++++++*####          
          +++++++++*@@@%%%############%#+++*#############*+*###%%%%#*++++++**#*++++++++++++++++++++++++++++++++++++++++###+++++++++++++++++++++++++++++++++++++++++++#%#*          
          ++++++++#@@@%%###############%#**############****#%%%%##%*++++++**#%*++++++++++++++++++++++++++++++++*+++++++*##+++++++++++++++++++++++++++++++++++++++++++*#%#          
          +++++++#@@@%%%###############%%###########%%#**#%%##***%%*+++++**#%%*++++++++++++++++++++++++++++++++***++++++*#++++++++++++++++++++++++++++++++++++++++++++*%%          
          ++++++%@@@%%###################*#%%%%%%%*****+******+**%#+++++**##%%*+++++++++++++++++++++++++++++++++***+++++*%#+++++++++++++++++++++++++++++++++++++++++++*#%          
          +++++%@@@@%%################**++++++++#%#*+++++++++***#%*++++***#%%%*+++++++++++++++++++++++++++++++++****++++*%#*+++++++++++++++++++++++++++++++++++++++++++*%          
          +++*#@@@@%%%###############*++++++++++*#%*++++++++++**#%++++***##%%%*++++++++++++++++++++++++++++++++++##**+++*#%*+++++++++++++++++++++++++++++++++++++++++++*%          
          +++#@@@@@%%%#########%%%%%#*+++++++++++*%*++++++++++*#%%++++***#%#%%*++++++++++++++++++++++++++++++++++*****+++*%*+++++++++++++++++++++++++++++++++++++++++++++          
          ++#@@@@%#%%%#########%%#*+++++++++++++++*+++++++++++*#%%+++***###*%%*+++++++++++++++++++++++++++++++++++*#***++*%*+++++++++++++++++++++++++++++++++++++++++++++          
          +%@@@@%**%%%########%%*++++++++++++++++++**+++++++++*#%%+++***%%#*%%#*++++++++++++++++++++++++++++++++++##****+*%#*++++++++++++++++++++++++++++++++++++++++++++          
          @@@@@%*+*%%%%######**++++++++++++++++++++**+++++++++**#%#%%#**%%#*#%%#++++++++++*#*+++++++++++++++++++++###*****%#*++++++++++++++++++++++++++++++++++++++++++++          
          @@@@@*+*#%%%%%####**+++++++++++++++++++**+++++++++++*#%%%%#***%#***%%#++++++++++*%%#*+++++++++++++++++++*##*****%%*++++++++++++++++++++++++++++++++++++++++++++          
          @@@%++**#%%%%%####*+++++++++++++++++#*++++++++++++*%%%%%%*+*##%#***#%#*+++++++++++%%%%#+++++++++++++++++*#%****#%%%#+++++++++++++++++++++++++++++++++++++++++++          
          @@%#++#%%%**#%%###*++++++++++++*###%**+++++++++*#%%%%%%%%*++#%%#****#%#+++++++++++*#%%%%#*++++++++++++++*#%#***#%%%#*+++++++++++++++++++++++++++++++++++++++++#          
          @@#+*%%#*++++*####*+++******#%%%##*+++++++**#%%%%%%#*+*%%*++*%%#*****#%*++++++++++++*#%%%%%#*+++++++++++#%%%#**#%%%%#+++++++++++++++++++++++++++++++++++++++++#          
          @%%%%%#++++++*######%%%%%%%#*****+++++*#%%%%%%%%*++++++*%#++*%%#*+***#%%++++++++++++++++#%%%%%%#++++++++#%#%#*##%%###++++++++++++++++++++++++++++++++++++++++++          
          **++++*##++++*###########%%****+++++++*******+++++++++++#%*++%%#*++****%#*++++++++++++++++**#%%%%%##*+++#%#%##*#%%*#%#+++++++++++++++++++++++++++++++++++++++++          
          #**++++*#*++#%%###########%#*++++++++++++++++++++++++++++##++#%#*+++***#%#++++++++++++++++++++++*######*#%#%%#*#%%**#%+++++++++++++++++++++++++++++++++++++++++          
          ###*++*#%#+##%%%%########%@@@@@@@#+++++++++++++++++++++++*##+*##**+++***#%#+++++++++++++++++++++++++++++##*#%#*#%#***%*++++++++++++++++++++++++++++++++++++++++          
          #####*#%#+++#@@@@@@@@@@@@@@@@@@@@@@@*##*++++++++++++++++++*#*+###**++++**#%#+++++++++++++++++++++++++++#%#**%###%#***%%*+++++++++++++++++++++++++++++++++++++++          
          %%%%%%%*++++*%@@@@@@@@@@@@@@@@@@@@@@#%@@@*+++++++++++++++++*#*%%#**++++++**%%++++++++++++++++++++++++++#%#**%###%#***%%*+++++++++++++++++++++++++++++++++++++++          
          +++*#%#*++++#@@@@@@@@@@@@@@@@@@@@@@@@#%@@@@#*+++++++++++++++*%%%#***++++++**%%*++++++++++++++++*#######%%@@@%%%%%@@#**%*+++++++++++++++++++++++++++++++++++++++          
          +++++*%#**#@@@@@@@@@@@@%%##********#%#%@@@@@@#++++++++++++++++#%%#**++++++++*#%#++++++++++++*##########%@@@@%%%%%@@@@@%#*++++++++++++++++++++++++++++++++++++++          
          +++++++#%%@@@@@@@@@@%#*********##********%@@@@@*+++++++++++++++#%#+**++++++++*###++++++++**#########*#%#%@@@%%%%%@@@@@%%#*++++++++++++++++++++++++++++++++++++#          
          ++*#%%%%@@@@@@@@@%#******#%@@@@@@@@@%%%#***##@@%*+++++++++++++++**#***+++++++++**%#*+++*####******+**#%*****##%%@@@@@@%%####*+++++++++++++++++++++++++++++++**+          
          +++*#%@@@@@@@@@%#*****#%@@%#*+++++++##%%%##***#%#*++++++++++++++++***+++++++++++++###**************##%%@@@@%#%##**#%@@%%#####*++++++++++++*+++++++++++++++++***          
          +++++*%@@@@@@%*******%@%*+++++++++++++++#@@%#***#*+++++++++++++++++++++*++++++++++++*##*******#######%####%@@%%%****#%%%#######**+++++++++*++++++++++++++++**##          
          ++++++*#@@@%#*****#%@@*++++++++++++++++++%@@@%#****+++++++++++++++++++++++++++++++++***#***####***+**+++++++**%@@%%#**##############*+++++*+++++++++++++++++#%*          
          ++++++++*#*******#%@@*+++++++++++++++++++%@%%@@%#**++++++++++++++++++++++++++++++++*****#%%#*+++++**++++++++*+*@@@@@%#*############*++++***+++++++++++++++++*%%          
          +**+++++++******#%@@@*++++++++++++++++++#@%%%%@@%**+++++++++++++++++++++++++++++++*****#%@#+++++++*+++++++++++*@@%%@@@%%##########*+++++*#*+++++++++++++++++++*          
          **++++++++#*****%@%%%@#+++++++++++++++*#%%%%%%%@@%*+++++++++++++++++++++++++++++++***#%@@#++++++++++++++++++++#@%%%%%@@%#*+#########+++*##*++++++++++++++++++++          
          **+*******@#***%@%%##%@%+++++++++++++*##++*#%%%%@@#+++++++++++++++++++++++++++++++**#%@@@#+++++++++++++++++++#@@%%%%%%@%##++########*+*##**++++++++++++++++++++          
          %%%%####%%%%#++@@%#%##*#@@%%%%#####%#*++++++*##%%@%++++++++++++++++++++++++++++++++#%@@%%%#+++++++++++++++*%@%%%%%%%%%%%%#*+**#######*####*++++++++++++++++++++          
          #**********##%%@@%##*+++++*##%%%%%%%#*++++++++*#%%%+++++++++++++++++++++++++++++++*%@%%%##%%%####*++++*##%#*+++**#%%%%%%###***#######%%#***++++++++++++++++++++          
          +++++++*******#%%%#*++++++++*########*+++++++++*#%%*++++++++++++++++++++++++++++++%@%%##**+++++*%%%%%%####++++++++*#%%%%%##****#####%%##***++++++++++++++++++++          
          ++++++++********%%#+++++++++++++++++++++++++++++*%@*++++++++++++++++++++++++++++++%@%##*+++++++*%%%#%#%%%#++++++++++*%%%###****####%%%%%#*+++++++++++++++++++++          
          ++++++***++###***##+++*######*++++++++++++++++++*%%*+++++++++++++++++++++++++++++*%@%#*+++++++****######*++++++++++++*#%#############%%%%#+++++++++++++++++++++          
          +++++*#########**#%%%%#*++***#%*++++++++++++++++#%%+++++++++++++++++++++++++++++++%@%*++++++++##++++++++++++++++++++++#%%#**************##+++++++++++++++++++++          
          ++++*##########**####*++++****%%*++++++++++++++*%%#+++++++++++++++++++++++++++++++%@#*+#+++++##*++++++++++++++++++++++###*****++++*********#*++++++++++++++++++          
          +**###########**####**********%%#*############%%%#++++++++++++++++++++++++++++++++*%@%++**+*#++++++++++++++**####**++*#*******++++++++++******+++++++++++++++++          
          *###########****%%%####*****#%%*******++++++***+++++++++++++++++++++++++++++++++++++#@%++++++++++++++++++#%%#****%%#*%*********++++++++++******++++++++++++++++          
          #***********##%%##*#%%%%%%%%##******++++++++++++++++++++++++++++++++++++++++++++++++++#%############**#*%%#**+++***#%#***######+++++++++++***##++++++++++++++++          
          %%%%%%%%%%%%%##****#***************++++++++++++++++++++++++++++++++******+++++++++++++++++++++++++******%%#*******####**#######+++++++++++***#%++++++++++++++++          
          ++++*%@%*********%@@@#*********+++++++++++++++**#%%%%%#######*++*%%%%%%%%%%#++++++++++++++++++++++++++***#%%%%##%%%%%%#*########*++++++*****##*++++++++++++++++          
          ++++*@@#+*****+**#%@#******+++++++++++++++++++*#%%%%%%%%%%%%%%%%%%%###**##%%%%*++++++++++++++++++++++++*****########*#%################***#%%*+++++++++++++++++          
          +++*%@@#++++++++++**++*++++++++++++++++++++++++*#%%%%%%%%%%##***************%%%#*+++++++++++++++++++++++++************#%%#**#########***#%%**++++++++++++*+++++          
          +++*@@#*++++++*#%####*+++++++++++++++++++++++++#%%%%%%%###********************%%%#++++++++++++++++++++++++++++++++******#%%%%##**###%%%%#*++++++++++++++**+++++          
          +++*@@#*++++*#%#*********++++++++++++++++++++++#%%%%%##************************#%%#*+++++++++++++++++++++++++++++++++++*#%###########*+++++++++++++++++***+++++          
          +++*%@@#+++#%#*+++++*##**#*++++++++++++++++++++#%%%%#****************************%%*+++++++++++++++++++++++++++++++++++#%#*******+++++++++++++++++++++****+++++          
          +++*#@@#+++#%#*++++++*###***++++++++++++++++++*%%%%#******************************%%*+++++++++++++++++++++++++++++++++#%##******+++++++++++++++++++++*****+++++          
          +++++@@%*++#%#*++++++####**#*+++++++++++++++++*%%%%#******************************%%*+++++++++++++++++++++++++++++++*#%##**#***+++++++++++++++++++++******+++++          
          +++++#@@@#+#%%****########*##++++++++++++++++++#%%%#*******************************%#+++++++++++++++**+++++++++++++*%%#*####*++++++++++++++++++++++*#*****+++++          
          ******#%@@%*#%#**#########*##++++++++++++++++++#%%%#*******************************#*++++++++++*#**********++++++##%#*##%#*+++++++++++++++++++++++*#*******++*#          
          ++++**##%@@%##%%#########*#%#++++++++++++++++++*#%%##*****************************#*++++++++++*#**+++++********#%%###%%%*++++++++++++++++++++++++*##*******++*%          
          ++++++**#%@@@%*%%%#*##***#%#*+++++++++++++++++++*%%%#****************************#*++++++++++##*+++++++****%#%%%%%%##%%*++++++++++++++++++++++++*%%#*******++*%          
          *+++++*##%%%@@@%###%%%%%%#**+++++++++++++++++++++*%%%#*************************#*+++++++++++##*+++++++++***%++++++**#%#*+++++++++++++++++++++++*%%%#*******+*#%          
          ++++++**#%%###%@@%#*******+++++++++++++++++++++++++#%%%#*********************#*+++++++++++++%#*+++++++*****%*+++***#%%++++++++++++++++++++++++*%%%%#*****#***%%          
          +**+++###%%######%@@@%**+++++++++++++++++++++++++++++#%%%%%#***********##*++++++++++++++++++%%**#######++**%*++***#%%++++++++++++++++++++++++*#%#%%#*#####**#%#          
          *##*****#%#########%%@@@%#*+++++++++++++++++++++++++++++**####**++++++++++++++++++++++++++++*%##########**#%*+****#%#++++++++++++++++++++++++*%%#%%#########%%#          
          ##*++++#%%#############%@@@@%**++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#%%*#######*##******%%#++++++++++++++++++++++++*#%##%%%#######%%##          
          ###*+++*#****###############%@@@@@%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#%%%##**##***%@@@@%#*++++++++++++++++++++++++#%%###%%######%%%##          
          ###**+##**++++*##############%@@@@@@@@@%###**++++++++++++++++++++++++++++++++++++++++++++++++++++*#%%@@%@@@%%%##%%*++++++++++++++++++++++++*#%####%%######%%%##          
          #####+#***+++++**#########%@@@@@@%****#%@@@@@@@@@#*+++++++++++++++++++++++++++++++++++++++++*#%@@@@@@@@#*******#%#+++++++++++++++++++++++++#%%#####%#####%%%###          
          #######**##++++#**#%####%@@@@@##*************#####@@@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%###%%%%##**#%%#**********#%%++++++++++++++++++++++++++#%%#####%#####%%%###          
          ######%#*###***##*#%##%@@@@@#*****************************###%%%%%%%%%%%%%%%%%%%%%#*++++**#####***%%#*********#%#++++++++++++++++++++++++++#%%#####%####%%%%%##          
          %#####%%#*######**#%#@@@@@#***+++++*******##%%%##*************##%%%##***********#%*++++++*######**%%#********#%#+++++++++++++++++++++++++++#%%####%%##%%%#%%%##          
          %######%%#*******#%%@@@@%**+++++++++++*%@@@@%%%%@@@@@%%%****#%%####%#***%%%@@@@@@%**+++++***####**##*********#%#+++++++++++++++++++++++++++#%%###%%%#%%%##%%%%%                     */
/**
   Hope she goes indie...
 **/

enum DIR
{
    NW,
    NE,
    SE,
    SW,
    NUM_DIRS
};

class QuadBox
{
public:
    QuadBox(Surface & surface, const Rect & boundary)
        : surface(surface), boundary_(boundary)
    {}

    //================ getters and setters ================//
    int x0() const { return boundary_.x; }
    int x1() const { return x0() + boundary_.w; }
    int y0() const { return boundary_.y; }
    int y1() const { return y0() + boundary_.h; }
    //=====================================================//
    
    bool contains_circle(const Circle * c) const
    {
        // Calculate the distance from the circle's center to the
        // rectangle's center
        float circle_distancex = abs(c->x() - (x0() + boundary_.w / 2));
        float circle_distancey = abs(c->y() - (y0() + boundary_.h / 2));

        // Early exits: If circle's center is too far from the rectangle
        if (circle_distancex > (boundary_.w / 2 + c->r())) { return false; }
        if (circle_distancey > (boundary_.h / 2 + c->r())) { return false; }

        // If circle's center is within rectangle's width or height bounds
        if (circle_distancex <= (boundary_.w / 2)) { return true; }
        if (circle_distancey <= (boundary_.h / 2)) { return true; }

        // Check corner case (distance to rectangle corner)
        float dx = circle_distancex - boundary_.w / 2;
        float dy = circle_distancey - boundary_.h / 2;
        float corner_distance_sq = dx * dx + dy * dy;

        return corner_distance_sq <= c->r() * c->r();
         // return (c->x() >= x0() && c->x() <= x1() &&
         //        c->y() >= y0() && c->y() <= y1());
    }

    bool contains_box(const QuadBox & other) const
    {
        return (other.x0() >= x0() && other.x1() <= x1() &&
                other.y0() >= y0() && other.y1() <= y1());          
    }

    void draw()
    {
        // std::cout << "drawing boundary"
        //           << " x0=" << x0()
        //           << " x1=" << x1()
        //           << " y0=" << y0()
        //           << " y1=" << y1()
        //           << std::endl;
        surface.put_line(x0(), y0(), x0(), y1(), WHITE); // left
        surface.put_line(x1(), y0(), x1(), y1(), WHITE); // right
        surface.put_line(x0(), y0(), x1(), y0(), WHITE); // top
        surface.put_line(x0(), y1(), x1(), y1(), WHITE); // bottom
    }

//private:
    Surface & surface;
    Rect boundary_;
};

class QTNode
{
public:
    QTNode(Surface & surface, int x0, int y0, int x1, int y1)
        : boundary_(surface, Rect(x0, y0, x1 - x0, y1 - y0))
    {}
    ~QTNode()
    {
        //std::cout << "deleting " << this << std::endl;
        for (auto * child : children())
        {
            delete child;
        }
        children().clear();
        circles().clear();
    }

    //================ getters and setters ================//
    QuadBox & boundary() { return boundary_; }
    QuadBox boundary() const { return boundary_; }
    std::vector< QTNode * > & children() { return children_; }
    std::vector< QTNode * > children() const { return children_; }
    std::vector< Circle * > & circles() { return circles_; }
    std::vector< Circle * > circles() const { return circles_; }
    //=====================================================//

    bool insert(Circle * c)
    {
        // If the circle does not intersect this node's boundary, ignore it
        if (!boundary_.contains_circle(c))
            return false;

        // If there's space in this node and no subdivisions, add the circle
        if (circles().size() < THRESHOLD && children().empty())
        {
            circles().push_back(c);
            return true;
        }

        // Otherwise, subdivide if necessary
        if (children().empty())
            subdivide();

        // Insert children
        bool inserted = false;
        for (auto * child : children())
        {
            if (child->insert(c))
            {
                inserted = true;
            }
        }

        // Return true if inserted into at least one child
        return inserted;
    }

    void subdivide()
    {
        // Current boundary values
        int x_min = boundary_.x0();
        int y_min = boundary_.y0();
        int x_max = boundary_.x1();
        int y_max = boundary_.y1();
        Surface & surface = boundary_.surface;

        // Create children with new boundary values
        children().push_back(new QTNode(surface, x_min, y_min, (x_min + x_max) / 2, (y_min + y_max) / 2));
        children().push_back(new QTNode(surface, (x_min + x_max) / 2, y_min, x_max, (y_min + y_max) / 2));
        children().push_back(new QTNode(surface, x_min, (y_min + y_max) / 2, (x_min + x_max) / 2, y_max));
        children().push_back(new QTNode(surface, (x_min + x_max) / 2, (y_min + y_max) / 2, x_max, y_max));
        
        // Redistribute circles into children
        for (auto * circle : circles())
        {
            for (auto * child : children())
            {
                if (child->boundary().contains_circle(circle))
                {
                    child->insert(circle);
                }
            }
        }
        
        // Clear circles from parent
        circles().clear();
    }

    std::vector< Circle * > get_circles_in_quadrant(const QuadBox & quadrant) const
    {
        std::vector< Circle * > ret;

        // If this boundary is not within the other,
        // then return empty vector
        if (!boundary_.contains_box(quadrant))
            return ret;

        // Append this node's circles
        for (auto * circle : circles())
        {
            if (quadrant.contains_circle(circle))
                ret.push_back(circle);
        }

        // Otherwise, get circles from children
        for (auto * child : children())
        {
            std::vector< Circle * > child_circles = child->get_circles_in_quadrant(quadrant);
            ret.insert(ret.end(), child_circles.begin(), child_circles.end());
        }

        return ret;
    }

    void draw()
    {
        boundary_.draw();
    }

    bool is_leaf()
    {
        return children_.empty();
    }
    
private:
    QuadBox boundary_;
    std::vector< QTNode * > children_;
    std::vector< Circle * > circles_;
};

inline
void get_leaves_(QTNode * p, std::vector < QTNode * > & v)
{
    if (p == NULL)
    {
        return;
    }
    else
    {
        if (p->is_leaf())
        {
            v.push_back(p);
        }

        for (auto * child : p->children())
        {
            get_leaves_(child, v);
        }
    }
}

class QuadTree
{
public:
    QuadTree(Surface & surface)
        : surface_(surface),
          root_(new QTNode(surface, 0, 0, W - 1, H - 1))
    {}
    ~QuadTree()
    {
        delete root();
    }

    //================ getters and setters ================//
    Surface & surface() { return surface_; }
    Surface surface() const { return surface_; }
    QTNode * & root() { return root_; }
    QTNode * root() const { return root_; }
    std::vector< QTNode * > & leaves() { return leaves_; }
    std::vector< QTNode * > leaves() const { return leaves_; }
    //=====================================================//

    void insert(Circle * c)
    {
        root()->insert(c);
    }

    void get_leaves()
    {
        get_leaves_(root(), leaves());
    }

    void delete_children()
    {
        for (auto * child : root()->children())
        {
            delete child;
        }
        root()->children().clear();
        root()->circles().clear();
        leaves().clear();
    }
 
private:
    Surface & surface_;
    QTNode * root_;
    std::vector< QTNode * > leaves_;
};

#endif
